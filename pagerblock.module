<?php
/**
 * @file
 *   Generate Pager block.
 */
 
/**
 * Implementation of hook_help()
 */
function pagerblock_help($path, $arg) {
  if ($path == 'admin/help#pagerblock') {
    $txt = 'Generate Pager Block.';
    $output = t($txt);
    return $output;
  }
}

/**
 * Implementation of hook_block().
 */
function pagerblock_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Generic Node Type Pager');
    $blocks[1]['info'] = t('Events Pager');
//    $blocks[3]['info'] = t('Blog Post Pager');
    return $blocks;
  } else if ($op == 'view') {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $nid = arg(1);
      switch($delta) {
        /*
        case 0:
          // @TODO add generic pager block
          $content = theme('pagerblock_block', $nid);
        break;
        // */

        case 1:
          $op = 'events';
          $content = theme('pagerblock_block', $nid, $op);
        break;

        /*
        case 3:
          $op = 'blog';
          $content = theme('pagerblock_block', $nid, $op);
        break;
        // */
      }
      $block['subject'] = '';
      $block['content'] = $content;
      return $block;
    }
  }
}
 
/**
 * Implementation of hook_theme().
 */
function pagerblock_theme() {
  return array(
    'pagerblock_block' => array(
      'arguments' => array('nid' => NULL, 'op' => NULL),
    )
  );
}
 
/**
 * Implementation of theme function.
 * 
 * @param $nid
 *  node id
 * 
 * @param $op
 *  string
 *  - events
 * 
 * @return 
 *  HTML pager, PREV / NEXT links
 */
function theme_pagerblock_block($nid, $op = NULL) {
  $output = '';
  // add stylesheet
  $path = drupal_get_path('module', 'pagerblock');
  drupal_add_css("$path/pagerblock.css");
  switch ($op) {
    case 'events': 
      // Page through upcoming events (events taking place today or in the future).
      $now = time();
//dsm($now, 'now');
      // Create previous link.
      // Get date of current event.
      // @todo Handle versions (vid).
//dsm($nid, 'nid');
      $current_event_date = db_result(db_query("SELECT field_event_date_value "
                            ."FROM {content_type_event} WHERE nid = %d ", $nid));
//dsm($current_event_date, 'current event date');
      // Where criteria: 
      // - event is the next event before the current event
      $sql = "SELECT n.nid FROM {node} n "
            ."JOIN {content_type_event} e ON n.nid = e.nid "
            ."WHERE field_event_date_value < %d "    // event happens before current event
            ."ORDER BY field_event_date_value DESC, nid "
            ."LIMIT 1";
      $previous_nid = db_result(db_query($sql, $current_event_date));
//dsm($previous_nid, 'previous nid');
      if (!empty($previous_nid)) {
        $txt = t('PREV');
        $options['attributes']['class'] = 'previous-event';
        $options['attributes']['alt'] = t('Previous Event');
        $previous_link = l($txt, "node/$previous_nid", $options);
      }

      // Next
      // Create next link.
//dsm($current_event_date, 'current event date');
      // Where criteria: 
      // - event is the next event after the current event
      $sql = "SELECT n.nid FROM {node} n JOIN {content_type_event} e ON n.nid = e.nid "
            ."WHERE field_event_date_value > %d "    // event happens after current event
            ."ORDER BY field_event_date_value ASC, nid "
            ."LIMIT 1";
      $next_nid = db_result(db_query($sql, $current_event_date));
//dsm($next_nid, 'next nid');
      if (!empty($next_nid)) {
        $txt = t('NEXT');
        $options['attributes']['class'] = 'next-event';
        $options['attributes']['alt'] = t('Next Event');
        $next_link = l($txt, "node/$next_nid", $options);
      }
      $output = '<div class="event-pager">'. $previous_link .' / '. $next_link .'</div>';

    break;

    default: 
      // Page through node type by date created.

    break;
  }
  

  return $output;
}
